/**********
JAVA
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.




***********/


class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
       List<Integer> res = new ArrayList<Integer>();
    if(nums.length == 0)    return res;
    Arrays.sort(nums);
    int maxSize = Integer.MAX_VALUE;
    Map<Integer, List<Integer>> map = new HashMap<>();
    for(int i = 0; i < nums.length; i++) {
        int max = 0;
        for(int j = 0; j < i; j++) {
        	if(nums[i] % nums[j] != 0) continue;
            if(map.get(nums[j]).size() > max) {
            	List<Integer> tmp = new ArrayList<>(map.get(nums[j]));
                max = tmp.size();
                tmp.add(nums[i]);
                map.put(nums[i], tmp);
            }
        }
        if(!map.containsKey(nums[i])) {
            List<Integer> t1 = new ArrayList<Integer>();
            t1.add(nums[i]);
            map.put(nums[i], t1);
        }
        if(!map.containsKey(maxSize) || map.get(maxSize).size() < map.get(nums[i]).size()) {
            maxSize = nums[i];
        } 
    }
    return map.get(maxSize);
}
}
