/****************
JAVA

Numbers can be regarded as the product of their factors.

For example, 8 = 2 x 2 x 2 = 2 x 4.
Given an integer n, return all possible combinations of its factors. You may return the answer in any order.

Note that the factors should be in the range [2, n - 1].

 

Example 1:

Input: n = 1
Output: []
Example 2:

Input: n = 12
Output: [[2,6],[3,4],[2,2,3]]
Example 3:

Input: n = 37
Output: []
Example 4:

Input: n = 32
Output: [[2,16],[4,8],[2,2,8],[2,4,4],[2,2,2,4],[2,2,2,2,2]]
 

Constraints:

1 <= n <= 108



***********************/



public class Solution {
public List<List<Integer>> getFactors(int n) {
    List<List<Integer>> list = new ArrayList<>();

    list = perform(n, list, new ArrayList<Integer>());
    return list;
}

private List<List<Integer>> perform(int n, List<List<Integer>> list, List<Integer> l){
    for(int i=2;i<n;i++){
        if(n%i==0 && i<=n/i && (l.size()==0 || l.get(l.size()-1) <= i)){
            List<Integer> temp  = new ArrayList<Integer>(l);
            temp.add(i);
            list = perform(n/i, list, temp);
            temp.add(n/i);
            list.add(temp);
        }
    }
    return list;
}
}
