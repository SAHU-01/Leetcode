/*

JAVA

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

Methods pop, top and getMin operations will always be called on non-empty stacks.

*/

class MinStack {
    class Node {
        int val;
        int min;
        Node next;

        public Node(int v, int m, Node n) {
            this.val = v;
            this.min = m;
            this.next = n;
        }
    }

    Node head;
    int min;

    public MinStack() {
        min = Integer.MAX_VALUE;
    }

    public void push(int x) {
        min = Math.min(min, x);
        head = new Node(x, min, head);
    }

    public void pop() {
        head = head.next;
        min = head != null ? head.min : Integer.MAX_VALUE;
    }

    public int top() {
        return head.val;
    }

    public int getMin() {
        return head.min;
    }
}
