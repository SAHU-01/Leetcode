#include <iostream>
#include <vector>
#include <algorithm>
class Solution {
public:
    long long minOperationsToMakeMedianK(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int mid = n / 2;

        // If k is already the median, return 0 operations
        if (nums[mid] == k)
            return 0;

        // If k is smaller than the current median, we need to decrease the elements after the median
        else if (nums[mid] > k) {
            long long operations = 0;

            for (int i = mid; i >= 0; i--) {
                if (nums[i] >= k)
                    operations += nums[i] - k;
                else
                    break;
            }

            return operations;
        }

        // If k is larger than the current median, we need to increase the elements before the median
        else {
            long long operations = 0;

            for (int i = mid; i < n; i++) {
                if (nums[i] <= k)
                    operations += k - nums[i];
                else
                    break;
            }

            return operations;
        }
    }
};
