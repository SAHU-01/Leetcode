/*
JAVA

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
         var res = new ArrayList<List<Integer>>();
        if (root != null) {
            add(0, root, res);       
            Collections.reverse(res);            
        }
        return res;
    }
    
    private static void add(int level, TreeNode node, List<List<Integer>> result) {
        if (level == result.size() && node != null) {
            result.add(new ArrayList<Integer>());
        }
        
        result.get(level).add(node.val);

        if (node.left != null) add(level + 1, node.left, result);
        if (node.right != null) add(level + 1, node.right, result);
    }
}
