/**********
Given two strings s and t, check if s is a subsequence of t.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 104
s and t consist only of lowercase English letters.
 

Follow up: If there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?


*********/
class Solution {
    public boolean isSubsequence(String s, String t) {
        int tn = t.length(), sn = s.length();
        if(sn==0) return true;
        if(tn==0) return false;
        int tc = 0, sc = 0;
        while(tc<tn && sc<sn){
            if(t.charAt(tc)==s.charAt(sc)) sc+=1;
            tc+=1;
        }
        return sn==sc;
    }
}
